# -*- coding: utf-8 -*-
"""VGG16 DERMATITIS/PSORIASIS rgb.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vYSdEXB6BGt2PtyNE_CpEBTh_P6MZo_M
"""

import keras
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Convolution2D
from keras.layers import MaxPooling2D
from tensorflow.keras.applications.vgg16 import VGG16
from tensorflow.keras.applications.vgg16 import preprocess_input
from tensorflow.keras.optimizers import Adam
from keras.layers import Flatten
from keras.layers import Dense,Dropout
import matplotlib.pyplot as plt
import os

# Directory with training dermatitis pictures
traindermatitis = os.path.join('/content/drive/MyDrive/Proyect/dermatitis psoriasis train/dermatitis')

# Directory with training psoriasis pictures
trainpsoriasis = os.path.join('/content/drive/MyDrive/Proyect/dermatitis psoriasis train/psoriasis')

# Directory with validation dermatitis pictures
valdermatitis = os.path.join('/content/drive/MyDrive/Proyect/dermatitis psoriasis test/dermatitis')

# Directory with validation psoriasis pictures
valpsoriasis = os.path.join('/content/drive/MyDrive/Proyect/dermatitis psoriasis test/psoriasis')

print(f'total training dermatitis images: {len(os.listdir(traindermatitis))}')
print(f'total training psoriasis images: {len(os.listdir(trainpsoriasis))}')
print(f'total validation dermatitis images: {len(os.listdir(valdermatitis))}')
print(f'total validation psoriasis images: {len(os.listdir(valpsoriasis))}')

from keras.preprocessing.image import ImageDataGenerator

# Apply data augmentation
train_datagen = ImageDataGenerator(preprocessing_function=preprocess_input,
      rotation_range=45,
      width_shift_range=0.2,
      height_shift_range=0.2,
      shear_range=0.2,
      zoom_range=0.2,
      horizontal_flip=True,
      fill_mode='nearest')

validation_datagen = ImageDataGenerator(preprocessing_function=preprocess_input, rescale=1./155)

# Flow training images in batches of 128 using train_datagen generator
train_generator = train_datagen.flow_from_directory(
        '/content/drive/MyDrive/Proyect/dermatitis psoriasis train',  # This is the source directory for training images
        target_size=(224, 224),  # All images will be resized
        batch_size=64,
        # Since we use binary_crossentropy loss, we need binary labels
        class_mode='categorical')

# Flow training images in batches of 128 using train_datagen generator
validation_generator = validation_datagen.flow_from_directory(
        '/content/drive/MyDrive/Proyect/dermatitis psoriasis test',  # This is the source directory for training images
        target_size=(224, 224),  # All images will be resized
        batch_size=32,
        # Since we use binary_crossentropy loss, we need binary labels
        class_mode='categorical')

vvg = VGG16(input_shape=(224,224, 3), include_top=False,weights = 'imagenet')

for layers in (vvg.layers):
    layers.trainable = False

vvg.layers

import tensorflow as tf

model = Sequential()
model.add(vvg)

# Add new layers
model.add(Flatten())
model.add(Dense(4096 , activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(4096 , activation='relu'))
model.add(Dropout(0.3))
model.add(Dense(4096, activation='relu'))
model.add(Dropout(0.4))
model.add(Dense(2, activation='softmax'))

model.compile(optimizer = Adam(learning_rate=0.0001),
             loss='categorical_crossentropy',
             metrics=['accuracy'])

model.summary()

history = model.fit(
      train_generator,
      steps_per_epoch=30,
      epochs=20,
      verbose=1,
      validation_data = validation_generator,
      validation_steps=11)

import torch
torch.save(model, "/content/drive/MyDrive/Proyect/vgg16model.pth")

model.save('vgg16', save_format='tf')

# Mover el modelo guardado a Google Drive
!mv vgg16 /content/gdrive/My\ Drive/

model.save('/content/gdrive/My Drive/modelovgg16.keras')

##Curvas de validaci√≥n y trainning accuracy
import matplotlib.pyplot as plt

def plot_loss_acc(history):
  '''Plots the training and validation loss and accuracy from a history object'''
  acc = history.history['accuracy']
  val_acc = history.history['val_accuracy']
  loss = history.history['loss']
  val_loss = history.history['val_loss']

  epochs = range(len(acc))

  plt.plot(epochs, acc, 'ro', label='Training accuracy')
  plt.plot(epochs, val_acc, 'b', label='Validation accuracy')
  plt.title('Training and validation accuracy')

  plt.figure()

  plt.plot(epochs, loss, 'ro', label='Training Loss')
  plt.plot(epochs, val_loss, 'b', label='Validation Loss')
  plt.title('Training and validation loss')
  plt.legend()

  plt.show()
  # Plot training results
plot_loss_acc(history)

import numpy as np
import keras.utils as image
img_size = (224, 224)
img = image.load_img('/content/derm (40).jpg', target_size=img_size)
x = image.img_to_array(img)
x = np.expand_dims(x, axis=0)
images = np.vstack([x])

images

y_proba=model.predict(images)
y_proba